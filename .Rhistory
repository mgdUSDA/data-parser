c <- scan(cozir, n = 2 , what = "character")
co2 <- as.numeric(c[2])
print(co2)
c
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- scan(cozir, n = 2 , what = "character")
temperature <- as.numeric(t[2])
print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- scan(cozir, n = 2 , what = "character")
humidity <- as.numeric(h[2])
print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- scan(cozir, n = 2 , what = "character")
co2 <- as.numeric(c[2])
print(co2)
}
write("T\r\n", cozir) # Return most recent temperature measure
t <- scan(cozir, n = 2 , what = "character")
t
isOpen(cozir)
write("K 2\r\n", cozir)
readLines(cozir)
# Set operting mode to STOP
write("K 2\r\n", cozir)
readLines(cozir, n = -1)
readLines(cozir, n = -1)
write("Y\r\n", cozir)
readLines(cozir, n = -1)
write("Y\r\n", cozir)
readLines(cozir, n = -1)
write("Y\r\n", cozir)
Sys.sleep(0.05)
s <- readLines(cozir, n = -1)
s
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
s
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
s
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
s
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
s
?readLines
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- readLines(cozir, n = -1L)
t
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- readLines(cozir, n = -1L)
print(t)
#  temperature <- as.numeric(t[2])
#  print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- readLines(cozir, n = -1L)
print(h)
#  humidity <- as.numeric(h[2])
#  print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- readLines(cozir, n = -1L)
print(c)
#  co2 <- as.numeric(c[2])
#  print(co2)
}
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
close(cozir)
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
# Set operting mode to STOP
#write("K 2\r\n", cozir)
#readLines(cozir, n = -1)
# Return firmware version and sensor serial number
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
print(s)
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- readLines(cozir, n = -1L)
print(t)
#  temperature <- as.numeric(t[2])
#  print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- readLines(cozir, n = -1L)
print(h)
#  humidity <- as.numeric(h[2])
#  print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- readLines(cozir, n = -1L)
print(c)
#  co2 <- as.numeric(c[2])
#  print(co2)
}
close(cozir)
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
# Set operting mode to STOP
#write("K 2\r\n", cozir)
#readLines(cozir, n = -1)
# Return firmware version and sensor serial number
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
print(s)
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.05)
t <- readLines(cozir, n = -1L)
print(t)
#  temperature <- as.numeric(t[2])
#  print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.05)
h <- readLines(cozir, n = -1L)
print(h)
#  humidity <- as.numeric(h[2])
#  print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.05)
c <- readLines(cozir, n = -1L)
print(c)
#  co2 <- as.numeric(c[2])
#  print(co2)
}
close(cozir)
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
# Set operting mode to STOP
#write("K 2\r\n", cozir)
#readLines(cozir, n = -1)
# Return firmware version and sensor serial number
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
print(s)
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- readLines(cozir, n = -1L)
print(t)
#  temperature <- as.numeric(t[2])
#  print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- readLines(cozir, n = -1L)
print(h)
#  humidity <- as.numeric(h[2])
#  print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- readLines(cozir, n = -1L)
print(c)
#  co2 <- as.numeric(c[2])
#  print(co2)
}
close(cozir)
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
# Set operting mode to STOP
#write("K 2\r\n", cozir)
#readLines(cozir, n = -1)
# Return firmware version and sensor serial number
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
print(s)
for(i in 1:2000){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- readLines(cozir, n = -1L)
print(t)
#  temperature <- as.numeric(t[2])
#  print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- readLines(cozir, n = -1L)
print(h)
#  humidity <- as.numeric(h[2])
#  print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- readLines(cozir, n = -1L)
print(c)
#  co2 <- as.numeric(c[2])
#  print(co2)
Sys.sleep(1)
}
t <- scan(cozir, n = 2, what = "character")
print(t)
t <- scan(cozir, n = 2, what = "character")
print(t)
t <- scan(cozir, n = 3, what = "character")
write("T\r\n", cozir) # Return most recent temperature measure
t <- scan(cozir, n = 3, what = "character")
print(t)
close(cozir)
system("MODE COM8:9600, N, 8, 1")
cozir = file("COM8", open = 'r+')
isOpen(cozir)
# Set operting mode to STOP
write("K 0\r\n", cozir)
Sys.sleep(0.1)
readLines(cozir, n = -1)
write("Y\r\n", cozir)
Sys.sleep(0.1)
s <- readLines(cozir, n = -1)
print(s)
for(i in 1:20){
write("T\r\n", cozir) # Return most recent temperature measure
Sys.sleep(0.1)
t <- scan(cozir, n = 3, what = "character")
temperature <- as.numeric(t[2])
print(temperature)
write("H\r\n", cozir) # Return most recent humidity measure
Sys.sleep(0.1)
h <- scan(cozir, n = 3, what = "character")
humidity <- as.numeric(h[2])
print(humidity)
write("Z\r\n", cozir) # Return most recent CO2 measure
Sys.sleep(0.1)
c <- scan(cozir, n = 3, what = "character")
co2 <- as.numeric(c[2])
print(co2)
}
close(cozir)
source("COZIR.R", print.eval = TRUE)
source("COZIR.R", print.eval = TRUE)
View(cozirData)
source("COZIR.R", print.eval = TRUE)
View(cozirData)
datarow <- data.frame()
View(datarow)
source("COZIR.R", print.eval = TRUE)
rm(datarow)
source("COZIR.R", print.eval = TRUE)
View(cozirData)
View(cozirData)
parserVersion = "COZIR September 10, 2015."
days = 10
dirOut = "C:/COZIR"
sensorID = "CZ"
didone <- tclVar(0)
nPorts = 1 # Number of sensors/ports
# Setup data output directory and file name: dirOut() and fname
reportTime = Sys.time()
reportTime = sub(":", "", reportTime)
reportTime = sub(":", "", reportTime) # Once for each ":" in the time.
dirOut = paste(dirOut, reportTime, sep="/")
if(is.na(file.info(dirOut)$isdir) == FALSE){
#Output folder exists.  Do nothing
}else{
#Output folder does not exist.  Create new folder.
dir.create(dirOut, recursive = TRUE)
}
fname = paste(dirOut, "COZIR.csv", sep = "/")
newData = data.frame(matrix(nrow = 1, ncol = 5))
colnames(newData) = c("datetime", "temperature", "humidity", "co2", "o2")
getSampleTime = function(){
# get date/time for each sample reading rounded to the nearest minute
# based on interval.min.
st = as.POSIXct(strptime(Sys.time(), "%Y-%m-%d %H:%M:%S"))
st.Min = as.numeric(format(st, "%M"))
while(st.Min %% interval.min != 0){
st = as.POSIXct(strptime(Sys.time(), "%Y-%m-%d %H:%M:%S"))
st.Min = as.numeric(format(st, "%M"))
#  print(paste("Wait for it...[", st, "]"))
}
print(paste("Now!  [", st, "]"))
return(st)
}
# Resets variable values when dialog button is pressed
reset <- function(){
tclvalue(interval)<-"60"
tclvalue(nPorts)<-"1"
}
# Submits variable values when dialog button is pressed
submit <- function() {
m1 <- as.numeric(tclvalue(interval))
m2 <- as.numeric(tclvalue(nPorts))
#  tkmessageBox(message="Done!")
tkdestroy(tt)
tclvalue(didone) = 1
interval <<- m1
nPorts <<- m2
}
# End of function definitions
interval <- tclVar("60")
nPorts <- tclVar("1")
tt <- tktoplevel()
tkwm.title(tt,"Soil mass input")
m1.entry <- tkentry(tt, textvariable=interval)
m2.entry <- tkentry(tt, textvariable=nPorts)
reset.but <- tkbutton(tt, text="Reset", command=reset)
submit.but <- tkbutton(tt, text="submit", command=submit)
tkgrid(tklabel(tt,text="Reading setup:"),columnspan=2)
tkgrid(tklabel(tt,text="Sample interval (s)"), m1.entry)
tkgrid(tklabel(tt,text="Number of sensors (max. 4)"), m2.entry)
tkgrid(submit.but, reset.but)
tkwait.variable(didone)
# Set sampling interval and number of samples
interval.min = interval / 60 # Sampling interval in minutes.
nSamples = days * 24 * 60 / interval.min
sampleTime = getSampleTime()
interval <- tclVar("60")
nPorts <- tclVar("1")
tt <- tktoplevel()
tkwm.title(tt,"Soil mass input")
m1.entry <- tkentry(tt, textvariable=interval)
m2.entry <- tkentry(tt, textvariable=nPorts)
reset.but <- tkbutton(tt, text="Reset", command=reset)
submit.but <- tkbutton(tt, text="submit", command=submit)
tkgrid(tklabel(tt,text="Reading setup:"),columnspan=2)
tkgrid(tklabel(tt,text="Sample interval (s)"), m1.entry)
tkgrid(tklabel(tt,text="Number of sensors (max. 4)"), m2.entry)
tkgrid(submit.but, reset.but)
tkwait.variable(didone)
# Set sampling interval and number of samples
interval.min = interval / 60 # Sampling interval in minutes.
nSamples = days * 24 * 60 / interval.min
sampleTime = getSampleTime()
?connection
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
close(port1)
close(port1)
source("COZIR1.1.R", print.eval = TRUE)
close(port1)
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
close(port1)
close(port1)
isOpen(port1)
source("COZIR1.1.R", print.eval = TRUE)
close(port1)
system("MODE COM8:9600, N, 8, 1")
port1 = file("COM8", open = 'r+')
isOpen(port1)
isOpen(port1)
source("LachatDriftCorrection.R", print.eval = TRUE)
mean(Nitrate20ppm$Concentration)
mean(Nitrate20ppm$Concentration, na.rm = TRUE)
Nitrate20ppm$Concentration[1]
mean(Nitrate20ppm$Concentration, na.rm = TRUE) / Nitrate20ppm$Concentration[1]
source("LachatDriftCorrection.R", print.eval = TRUE)
HTMLoutput
pngName
HTMLInsertGraph(pngName, file=HTMLoutput, GraphBorder = 3, Align = "center")
source("LachatDriftCorrection.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
close(port1)
source("COZIR1.1.R", print.eval = TRUE)
source("LachatDriftCorrection.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
dirOut
site
cat(site, "flux = ", newFlux, " ppm CO2/min.\n\n")
cat(site, "flux = ", newFlux, "ppm CO2/min.\n\n")
outfile
dirOut
reportTime
reportTime <- Sys.time()
reportDate <- reportTime
reportDate
?sub
substr(reportTime, 0, 10)
reportTime <- sub(":", "", reportTime)
reportTime <- sub(":", "", reportTime) # Once for each ":" in the time.
reportTime
strsplit(reportTime, " ")
strsplit(reportTime, " ")[2]
strsplit(reportTime, " ")[[1]][2]
dirOut
site
reportTime
reportTime <- Sys.time()
reportDate <- substr(reportTime, 0, 10)
reportTime <- sub(":", "", reportTime)
reportTime <- sub(":", "", reportTime) # Once for each ":" in the time.
reportTime <- strsplit(reportTime, " ")[[1]][2]
dirOut = paste(dirOut, reportDate, sep="/")
if(is.na(file.info(dirOut)$isdir) == FALSE){
#Output folder exists.  Do nothing
}else{
#Output folder does not exist.  Create new folder.
dir.create(dirOut, recursive = TRUE)
}
paste(dirOut, "/", site, "_", reportTime, ".csv", sep = "")
reportTime <- Sys.time()
reportDate <- substr(reportTime, 0, 10)
reportTime <- sub(":", "", reportTime)
reportTime <- sub(":", "", reportTime) # Once for each ":" in the time.
reportTime <- strsplit(reportTime, " ")[[1]][2]
dirOut = paste("C:/COZIR", reportDate, sep="/")
if(is.na(file.info(dirOut)$isdir) == FALSE){
#Output folder exists.  Do nothing
}else{
#Output folder does not exist.  Create new folder.
dir.create(dirOut, recursive = TRUE)
}
paste(dirOut, "/", site, "_", reportTime, ".csv", sep = "")
reportTime <- Sys.time()
reportDate <- substr(reportTime, 0, 9)
reportTime <- sub(":", "", reportTime)
reportTime <- sub(":", "", reportTime) # Once for each ":" in the time.
reportTime <- strsplit(reportTime, " ")[[1]][2]
dirOut = paste("C:/COZIR", reportDate, sep="/")
if(is.na(file.info(dirOut)$isdir) == FALSE){
#Output folder exists.  Do nothing
}else{
#Output folder does not exist.  Create new folder.
dir.create(dirOut, recursive = TRUE)
}
paste(dirOut, "/", site, "_", reportTime, ".csv", sep = "")
outfile <- paste(dirOut, "/", site, "_", reportTime, ".csv", sep = "")
strsplit(outfile, ".")
outfile
strsplit(outfile, "\.")
strsplit(outfile, "/.")
strsplit(outfile, ".")
strsplit(outfile, "\\.")
strsplit(outfile, "\\.")[[1]][1]
path <- outfile
paste(strsplit(path, "\\.")[[1]][1], "_flux.png", sep = "")
outfile
reportTime <- Sys.time()
substr(reportTime, 0, 10)
paste("C:/COZIR", reportDate, sep="/")
reportDate
substr(reportTime, 0, 10)
substr(reportTime, 1, 10)
reportDate <- substr(reportTime, 1, 10)
reportDate
list = ls()
list
rm("c", "compData", "didone", "dirOut", "dt", "dt0", "duration", "getFlux", "getSampleTime", "graphData",  "h", "i",
"interval", "m0.entry",  "m1.entry",  "m2.entry", "m3.entry",  "newData", "newFlux",  "nPorts",  "nSamples", "outfile",
"parserVersion", "path", "port1", "reportDate", "reportTime",  "reset", "reset.but", "sampleTime", "site", "submit",
"submit.but", "t", "tt")
detach("package:dplyr", unload = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
fluxPNG
sub("\\\\", "/", fluxPNG)
sub("/", "\\\\", fluxPNG)
gsub("/", "\\\\", fluxPNG)
fluxPNG <- gsub("/", "\\\\", fluxPNG)
HTMLInsertGraph(fluxPNG, file=HTMLoutput, GraphBorder = 3, Align = "center")
graphPNG <- paste(strsplit(outfile, "\\.")[[1]][1], ".png", sep = "")
fluxPNG <- paste(strsplit(outfile, "\\.")[[1]][1], "_flux.png", sep = "")
graphPNG
graphPNG <- C:\\COZIR\\2015-09-18\\COZIR_130147.png
graphPNG <- "C:\\COZIR\\2015-09-18\\COZIR_130147.png"
HTMLInsertGraph(graphPNG, file=HTMLoutput, GraphBorder = 3, Align = "center")
graphPNG <- paste(strsplit(outfile, "\\.")[[1]][1], ".png", sep = "")
graphPNG
HTML("<hr>",file=HTMLoutput)
HTMLInsertGraph(graphPNG, file=HTMLoutput, GraphBorder = 3, Align = "center")
graphPNG <- "C:\\COZIR\\2015-09-18\\COZIR_130147.png"
HTMLInsertGraph(graphPNG, file=HTMLoutput, GraphBorder = 3, Align = "center")
graphPNG <- paste(strsplit(outfile, "\\.")[[1]][1], ".png", sep = "")
fluxPNG <- paste(strsplit(outfile, "\\.")[[1]][1], "_flux.png", sep = "")
graphPNG
class(graphPNG)
HTMLInsertGraph("C:/COZIR/2015-09-18/COZIR_130147.png", file=HTMLoutput, GraphBorder = 3, Align = "center")
HTMLInsertGraph("C:\\COZIR\\2015-09-18\\COZIR_130147.png", file=HTMLoutput, GraphBorder = 3, Align = "center")
HTMLInsertGraph("COZIR_130147.png", file=HTMLoutput, GraphBorder = 3, Align = "center")
strsplit(graphPNG, "/")[[1]][length(strsplit(graphPNG, "/")[[1]])]
source("COZIR1.1.R", print.eval = TRUE)
source("COZIR1.1.R", print.eval = TRUE)
HTMLoutput
browseURL(HTMLoutput)
HTML.title(paste(site, "flux = ", newFlux, "ppm CO2/min."),
Align = "center", HR=5, file=HTMLoutput)
browseURL(HTMLoutput)
round(newFlux, digits = 1)
HTML.title(paste(site, "flux = ", round(newFlux, digits = 1), "ppm CO2/min."),
Align = "center", HR=4, file=HTMLoutput)
HTML.title(paste("COZIR CO2 sensor reading report for ", site, "_", reportTime, sep=""),
Align = "center", HR=3, file=HTMLoutput)
HTML.title(reportDate, Align = "center", HR=4, file=HTMLoutput)
HTML("<hr>",file=HTMLoutput)
HTML.title(paste(site, "flux = ", round(newFlux, digits = 1), "ppm CO2/min."),
Align = "center", HR=4, file=HTMLoutput)
lmFit[[1]]
